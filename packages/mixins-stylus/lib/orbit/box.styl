@require 'utils';

/*
 * Box helper
 *
 * Set element dimentions
 *
 * Examples:
 *   box(100px)
 *   box(100%, 20px)
 *   box(height: 20px)
 *   box(cover)
 */
box(width = null, height = null) {
  if (length(arguments) > 0 && arguments[0] == cover) {
    width = 100%;
    height = 100%;
  }

  width: width if width != null;
  height: height if height != null;
}

/*
 * Display block helper
 *
 * Examples:
 *   block()
 *   block(100px)
 *   block(100px, 20px)
 *   block(height: 20px)
 *   block(cover)
 */
block(width = null, height = null) {
  display: block;
  content: '' if is-pseudoelement();

  box(width, height);
}

/*
 * Display inline-block helper
 *
 * Examples:
 *   inline-block()
 *   inline-block(100px)
 *   inline-block(100px, 20px)
 *   inline-block(height: 20px)
 *   inline-block(cover)
 */
inline-block(width = null, height = null) {
  display: inline-block;
  content: '' if is-pseudoelement();

  box(width, height);
}

/*
 * Display flex helper
 *
 * Examples:
 *   flex();
 *   flex(100px)
 *   flex(100px, 20px)
 *   flex(height: 20px)
 *   flex(cover)
 */
flex(width = null, height = null) {
  // Skip when triggered by a property, eg: flex: 1 1 auto
  {current-property}: arguments if current-property;
  return if current-property;

  display: flex;
  box(width, height);
}

/*
 * Proportional box helper
 *
 * Examples:
 *   proportional-box()
 *   proportional-box(200px / 100px)
 *   proportional-box(0.5)
 */
proportional-box(ratio = 1) {
  if (!@position || @position == 'static') {
    position: relative;
  }

  &::before {
    block();
    padding-bottom: percentage(1 / ratio);
  }
}
